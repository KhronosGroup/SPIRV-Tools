// Copyright (c) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Tests for OpExtension validator rules.

#include <string>

#include "enum_string_mapping.h"
#include "extensions.h"
#include "gtest/gtest.h"

namespace {

using ::libspirv::Extension;

using ::testing::Values;
using ::testing::ValuesIn;

using ExtensionTest = ::testing::TestWithParam<std::pair<Extension, std::string>>;
using UnknownExtensionTest = ::testing::TestWithParam<std::string>;

#define ENUM_TO_STRING_TEST(KIND) \
using KIND##ToStringTest = ::testing::TestWithParam<std::pair<Spv##KIND, std::string>>; \
TEST_P(KIND##ToStringTest, Test##KIND##ToString) { \
  const auto value = GetParam().first; \
  const std::string expected_str = GetParam().second; \
  const std::string result_str = libspirv::KIND##ToString(value); \
  EXPECT_EQ(expected_str, result_str); \
}

TEST_P(ExtensionTest, TestExtensionFromString) {
  const std::pair<Extension, std::string>& param = GetParam();
  const Extension extension = param.first;
  const std::string extension_str = param.second;
  Extension result_extension;
  ASSERT_TRUE(libspirv::GetExtensionFromString(extension_str, &result_extension));
  EXPECT_EQ(extension, result_extension);
}

TEST_P(ExtensionTest, TestExtensionToString) {
  const std::pair<Extension, std::string>& param = GetParam();
  const Extension extension = param.first;
  const std::string extension_str = param.second;
  const std::string result_str = libspirv::ExtensionToString(extension);
  EXPECT_EQ(extension_str, result_str);
}

TEST_P(UnknownExtensionTest, TestExtensionFromStringFails) {
  Extension result_extension;
  ASSERT_FALSE(libspirv::GetExtensionFromString(GetParam(), &result_extension));
}

ENUM_TO_STRING_TEST(SourceLanguage)
ENUM_TO_STRING_TEST(ExecutionModel)
ENUM_TO_STRING_TEST(AddressingModel)
ENUM_TO_STRING_TEST(MemoryModel)
ENUM_TO_STRING_TEST(ExecutionMode)
ENUM_TO_STRING_TEST(StorageClass)
ENUM_TO_STRING_TEST(Dim)
ENUM_TO_STRING_TEST(SamplerAddressingMode)
ENUM_TO_STRING_TEST(SamplerFilterMode)
ENUM_TO_STRING_TEST(ImageFormat)
ENUM_TO_STRING_TEST(ImageChannelOrder)
ENUM_TO_STRING_TEST(ImageChannelDataType)
ENUM_TO_STRING_TEST(FPRoundingMode)
ENUM_TO_STRING_TEST(LinkageType)
ENUM_TO_STRING_TEST(AccessQualifier)
ENUM_TO_STRING_TEST(FunctionParameterAttribute)
ENUM_TO_STRING_TEST(Decoration)
ENUM_TO_STRING_TEST(BuiltIn)
ENUM_TO_STRING_TEST(Scope)
ENUM_TO_STRING_TEST(GroupOperation)
ENUM_TO_STRING_TEST(KernelEnqueueFlags)
ENUM_TO_STRING_TEST(Capability)

INSTANTIATE_TEST_CASE_P(AllExtensions, ExtensionTest,
    ValuesIn(std::vector<std::pair<Extension, std::string>>({
      {Extension::kSPV_KHR_16bit_storage,
        "SPV_KHR_16bit_storage"},
      {Extension::kSPV_KHR_device_group,
        "SPV_KHR_device_group"},
      {Extension::kSPV_KHR_multiview,
        "SPV_KHR_multiview"},
      {Extension::kSPV_KHR_shader_ballot,
        "SPV_KHR_shader_ballot"},
      {Extension::kSPV_KHR_shader_draw_parameters,
        "SPV_KHR_shader_draw_parameters"},
      {Extension::kSPV_KHR_subgroup_vote,
        "SPV_KHR_subgroup_vote"},
      {Extension::kSPV_NVX_multiview_per_view_attributes,
        "SPV_NVX_multiview_per_view_attributes"},
      {Extension::kSPV_NV_geometry_shader_passthrough,
        "SPV_NV_geometry_shader_passthrough"},
      {Extension::kSPV_NV_sample_mask_override_coverage,
        "SPV_NV_sample_mask_override_coverage"},
      {Extension::kSPV_NV_stereo_view_rendering,
        "SPV_NV_stereo_view_rendering"},
      {Extension::kSPV_NV_viewport_array2,
        "SPV_NV_viewport_array2"}
    })));

INSTANTIATE_TEST_CASE_P(UnknownExtensions, UnknownExtensionTest, Values(
      "",
      "SPV_KHR_",
      "SPV_KHR_device_group_ERROR",
      "SPV_ERROR_random_string_hfsdklhlktherh"
    ));

INSTANTIATE_TEST_CASE_P(SourceLanguageAllValues, SourceLanguageToStringTest,
    ValuesIn(std::vector<std::pair<SpvSourceLanguage, std::string>>({
      {SpvSourceLanguageUnknown,
       "Unknown"},
      {SpvSourceLanguageESSL,
       "ESSL"},
      {SpvSourceLanguageGLSL,
       "GLSL"},
      {SpvSourceLanguageOpenCL_C,
       "OpenCL_C"},
      {SpvSourceLanguageOpenCL_CPP,
       "OpenCL_CPP"},
      {SpvSourceLanguageHLSL,
       "HLSL"},
    })), );

INSTANTIATE_TEST_CASE_P(ExecutionModelAllValues, ExecutionModelToStringTest,
    ValuesIn(std::vector<std::pair<SpvExecutionModel, std::string>>({
      {SpvExecutionModelVertex,
       "Vertex"},
      {SpvExecutionModelTessellationControl,
       "TessellationControl"},
      {SpvExecutionModelTessellationEvaluation,
       "TessellationEvaluation"},
      {SpvExecutionModelGeometry,
       "Geometry"},
      {SpvExecutionModelFragment,
       "Fragment"},
      {SpvExecutionModelGLCompute,
       "GLCompute"},
      {SpvExecutionModelKernel,
       "Kernel"},
    })), );

INSTANTIATE_TEST_CASE_P(AddressingModelAllValues, AddressingModelToStringTest,
    ValuesIn(std::vector<std::pair<SpvAddressingModel, std::string>>({
      {SpvAddressingModelLogical,
       "Logical"},
      {SpvAddressingModelPhysical32,
       "Physical32"},
      {SpvAddressingModelPhysical64,
       "Physical64"},
    })), );

INSTANTIATE_TEST_CASE_P(MemoryModelAllValues, MemoryModelToStringTest,
    ValuesIn(std::vector<std::pair<SpvMemoryModel, std::string>>({
      {SpvMemoryModelSimple,
       "Simple"},
      {SpvMemoryModelGLSL450,
       "GLSL450"},
      {SpvMemoryModelOpenCL,
       "OpenCL"},
    })), );

INSTANTIATE_TEST_CASE_P(ExecutionModeAllValues, ExecutionModeToStringTest,
    ValuesIn(std::vector<std::pair<SpvExecutionMode, std::string>>({
      {SpvExecutionModeInvocations,
       "Invocations"},
      {SpvExecutionModeSpacingEqual,
       "SpacingEqual"},
      {SpvExecutionModeSpacingFractionalEven,
       "SpacingFractionalEven"},
      {SpvExecutionModeSpacingFractionalOdd,
       "SpacingFractionalOdd"},
      {SpvExecutionModeVertexOrderCw,
       "VertexOrderCw"},
      {SpvExecutionModeVertexOrderCcw,
       "VertexOrderCcw"},
      {SpvExecutionModePixelCenterInteger,
       "PixelCenterInteger"},
      {SpvExecutionModeOriginUpperLeft,
       "OriginUpperLeft"},
      {SpvExecutionModeOriginLowerLeft,
       "OriginLowerLeft"},
      {SpvExecutionModeEarlyFragmentTests,
       "EarlyFragmentTests"},
      {SpvExecutionModePointMode,
       "PointMode"},
      {SpvExecutionModeXfb,
       "Xfb"},
      {SpvExecutionModeDepthReplacing,
       "DepthReplacing"},
      {SpvExecutionModeDepthGreater,
       "DepthGreater"},
      {SpvExecutionModeDepthLess,
       "DepthLess"},
      {SpvExecutionModeDepthUnchanged,
       "DepthUnchanged"},
      {SpvExecutionModeLocalSize,
       "LocalSize"},
      {SpvExecutionModeLocalSizeHint,
       "LocalSizeHint"},
      {SpvExecutionModeInputPoints,
       "InputPoints"},
      {SpvExecutionModeInputLines,
       "InputLines"},
      {SpvExecutionModeInputLinesAdjacency,
       "InputLinesAdjacency"},
      {SpvExecutionModeTriangles,
       "Triangles"},
      {SpvExecutionModeInputTrianglesAdjacency,
       "InputTrianglesAdjacency"},
      {SpvExecutionModeQuads,
       "Quads"},
      {SpvExecutionModeIsolines,
       "Isolines"},
      {SpvExecutionModeOutputVertices,
       "OutputVertices"},
      {SpvExecutionModeOutputPoints,
       "OutputPoints"},
      {SpvExecutionModeOutputLineStrip,
       "OutputLineStrip"},
      {SpvExecutionModeOutputTriangleStrip,
       "OutputTriangleStrip"},
      {SpvExecutionModeVecTypeHint,
       "VecTypeHint"},
      {SpvExecutionModeContractionOff,
       "ContractionOff"},
      {SpvExecutionModeInitializer,
       "Initializer"},
      {SpvExecutionModeFinalizer,
       "Finalizer"},
      {SpvExecutionModeSubgroupSize,
       "SubgroupSize"},
      {SpvExecutionModeSubgroupsPerWorkgroup,
       "SubgroupsPerWorkgroup"},
      {SpvExecutionModeSubgroupsPerWorkgroupId,
       "SubgroupsPerWorkgroupId"},
      {SpvExecutionModeLocalSizeId,
       "LocalSizeId"},
      {SpvExecutionModeLocalSizeHintId,
       "LocalSizeHintId"},
      {SpvExecutionModePostDepthCoverage,
       "PostDepthCoverage"},
    })), );

INSTANTIATE_TEST_CASE_P(StorageClassAllValues, StorageClassToStringTest,
    ValuesIn(std::vector<std::pair<SpvStorageClass, std::string>>({
      {SpvStorageClassUniformConstant,
       "UniformConstant"},
      {SpvStorageClassInput,
       "Input"},
      {SpvStorageClassUniform,
       "Uniform"},
      {SpvStorageClassOutput,
       "Output"},
      {SpvStorageClassWorkgroup,
       "Workgroup"},
      {SpvStorageClassCrossWorkgroup,
       "CrossWorkgroup"},
      {SpvStorageClassPrivate,
       "Private"},
      {SpvStorageClassFunction,
       "Function"},
      {SpvStorageClassGeneric,
       "Generic"},
      {SpvStorageClassPushConstant,
       "PushConstant"},
      {SpvStorageClassAtomicCounter,
       "AtomicCounter"},
      {SpvStorageClassImage,
       "Image"},
      {SpvStorageClassStorageBuffer,
       "StorageBuffer"},
    })), );

INSTANTIATE_TEST_CASE_P(DimAllValues, DimToStringTest,
    ValuesIn(std::vector<std::pair<SpvDim, std::string>>({
      {SpvDim1D,
       "1D"},
      {SpvDim2D,
       "2D"},
      {SpvDim3D,
       "3D"},
      {SpvDimCube,
       "Cube"},
      {SpvDimRect,
       "Rect"},
      {SpvDimBuffer,
       "Buffer"},
      {SpvDimSubpassData,
       "SubpassData"},
    })), );

INSTANTIATE_TEST_CASE_P(SamplerAddressingModeAllValues, SamplerAddressingModeToStringTest,
    ValuesIn(std::vector<std::pair<SpvSamplerAddressingMode, std::string>>({
      {SpvSamplerAddressingModeNone,
       "None"},
      {SpvSamplerAddressingModeClampToEdge,
       "ClampToEdge"},
      {SpvSamplerAddressingModeClamp,
       "Clamp"},
      {SpvSamplerAddressingModeRepeat,
       "Repeat"},
      {SpvSamplerAddressingModeRepeatMirrored,
       "RepeatMirrored"},
    })), );

INSTANTIATE_TEST_CASE_P(SamplerFilterModeAllValues, SamplerFilterModeToStringTest,
    ValuesIn(std::vector<std::pair<SpvSamplerFilterMode, std::string>>({
      {SpvSamplerFilterModeNearest,
       "Nearest"},
      {SpvSamplerFilterModeLinear,
       "Linear"},
    })), );

INSTANTIATE_TEST_CASE_P(ImageFormatAllValues, ImageFormatToStringTest,
    ValuesIn(std::vector<std::pair<SpvImageFormat, std::string>>({
      {SpvImageFormatUnknown,
       "Unknown"},
      {SpvImageFormatRgba32f,
       "Rgba32f"},
      {SpvImageFormatRgba16f,
       "Rgba16f"},
      {SpvImageFormatR32f,
       "R32f"},
      {SpvImageFormatRgba8,
       "Rgba8"},
      {SpvImageFormatRgba8Snorm,
       "Rgba8Snorm"},
      {SpvImageFormatRg32f,
       "Rg32f"},
      {SpvImageFormatRg16f,
       "Rg16f"},
      {SpvImageFormatR11fG11fB10f,
       "R11fG11fB10f"},
      {SpvImageFormatR16f,
       "R16f"},
      {SpvImageFormatRgba16,
       "Rgba16"},
      {SpvImageFormatRgb10A2,
       "Rgb10A2"},
      {SpvImageFormatRg16,
       "Rg16"},
      {SpvImageFormatRg8,
       "Rg8"},
      {SpvImageFormatR16,
       "R16"},
      {SpvImageFormatR8,
       "R8"},
      {SpvImageFormatRgba16Snorm,
       "Rgba16Snorm"},
      {SpvImageFormatRg16Snorm,
       "Rg16Snorm"},
      {SpvImageFormatRg8Snorm,
       "Rg8Snorm"},
      {SpvImageFormatR16Snorm,
       "R16Snorm"},
      {SpvImageFormatR8Snorm,
       "R8Snorm"},
      {SpvImageFormatRgba32i,
       "Rgba32i"},
      {SpvImageFormatRgba16i,
       "Rgba16i"},
      {SpvImageFormatRgba8i,
       "Rgba8i"},
      {SpvImageFormatR32i,
       "R32i"},
      {SpvImageFormatRg32i,
       "Rg32i"},
      {SpvImageFormatRg16i,
       "Rg16i"},
      {SpvImageFormatRg8i,
       "Rg8i"},
      {SpvImageFormatR16i,
       "R16i"},
      {SpvImageFormatR8i,
       "R8i"},
      {SpvImageFormatRgba32ui,
       "Rgba32ui"},
      {SpvImageFormatRgba16ui,
       "Rgba16ui"},
      {SpvImageFormatRgba8ui,
       "Rgba8ui"},
      {SpvImageFormatR32ui,
       "R32ui"},
      {SpvImageFormatRgb10a2ui,
       "Rgb10a2ui"},
      {SpvImageFormatRg32ui,
       "Rg32ui"},
      {SpvImageFormatRg16ui,
       "Rg16ui"},
      {SpvImageFormatRg8ui,
       "Rg8ui"},
      {SpvImageFormatR16ui,
       "R16ui"},
      {SpvImageFormatR8ui,
       "R8ui"},
    })), );

INSTANTIATE_TEST_CASE_P(ImageChannelOrderAllValues, ImageChannelOrderToStringTest,
    ValuesIn(std::vector<std::pair<SpvImageChannelOrder, std::string>>({
      {SpvImageChannelOrderR,
       "R"},
      {SpvImageChannelOrderA,
       "A"},
      {SpvImageChannelOrderRG,
       "RG"},
      {SpvImageChannelOrderRA,
       "RA"},
      {SpvImageChannelOrderRGB,
       "RGB"},
      {SpvImageChannelOrderRGBA,
       "RGBA"},
      {SpvImageChannelOrderBGRA,
       "BGRA"},
      {SpvImageChannelOrderARGB,
       "ARGB"},
      {SpvImageChannelOrderIntensity,
       "Intensity"},
      {SpvImageChannelOrderLuminance,
       "Luminance"},
      {SpvImageChannelOrderRx,
       "Rx"},
      {SpvImageChannelOrderRGx,
       "RGx"},
      {SpvImageChannelOrderRGBx,
       "RGBx"},
      {SpvImageChannelOrderDepth,
       "Depth"},
      {SpvImageChannelOrderDepthStencil,
       "DepthStencil"},
      {SpvImageChannelOrdersRGB,
       "sRGB"},
      {SpvImageChannelOrdersRGBx,
       "sRGBx"},
      {SpvImageChannelOrdersRGBA,
       "sRGBA"},
      {SpvImageChannelOrdersBGRA,
       "sBGRA"},
      {SpvImageChannelOrderABGR,
       "ABGR"},
    })), );

INSTANTIATE_TEST_CASE_P(ImageChannelDataTypeAllValues, ImageChannelDataTypeToStringTest,
    ValuesIn(std::vector<std::pair<SpvImageChannelDataType, std::string>>({
      {SpvImageChannelDataTypeSnormInt8,
       "SnormInt8"},
      {SpvImageChannelDataTypeSnormInt16,
       "SnormInt16"},
      {SpvImageChannelDataTypeUnormInt8,
       "UnormInt8"},
      {SpvImageChannelDataTypeUnormInt16,
       "UnormInt16"},
      {SpvImageChannelDataTypeUnormShort565,
       "UnormShort565"},
      {SpvImageChannelDataTypeUnormShort555,
       "UnormShort555"},
      {SpvImageChannelDataTypeUnormInt101010,
       "UnormInt101010"},
      {SpvImageChannelDataTypeSignedInt8,
       "SignedInt8"},
      {SpvImageChannelDataTypeSignedInt16,
       "SignedInt16"},
      {SpvImageChannelDataTypeSignedInt32,
       "SignedInt32"},
      {SpvImageChannelDataTypeUnsignedInt8,
       "UnsignedInt8"},
      {SpvImageChannelDataTypeUnsignedInt16,
       "UnsignedInt16"},
      {SpvImageChannelDataTypeUnsignedInt32,
       "UnsignedInt32"},
      {SpvImageChannelDataTypeHalfFloat,
       "HalfFloat"},
      {SpvImageChannelDataTypeFloat,
       "Float"},
      {SpvImageChannelDataTypeUnormInt24,
       "UnormInt24"},
      {SpvImageChannelDataTypeUnormInt101010_2,
       "UnormInt101010_2"},
    })), );

INSTANTIATE_TEST_CASE_P(FPRoundingModeAllValues, FPRoundingModeToStringTest,
    ValuesIn(std::vector<std::pair<SpvFPRoundingMode, std::string>>({
      {SpvFPRoundingModeRTE,
       "RTE"},
      {SpvFPRoundingModeRTZ,
       "RTZ"},
      {SpvFPRoundingModeRTP,
       "RTP"},
      {SpvFPRoundingModeRTN,
       "RTN"},
    })), );

INSTANTIATE_TEST_CASE_P(LinkageTypeAllValues, LinkageTypeToStringTest,
    ValuesIn(std::vector<std::pair<SpvLinkageType, std::string>>({
      {SpvLinkageTypeExport,
       "Export"},
      {SpvLinkageTypeImport,
       "Import"},
    })), );

INSTANTIATE_TEST_CASE_P(AccessQualifierAllValues, AccessQualifierToStringTest,
    ValuesIn(std::vector<std::pair<SpvAccessQualifier, std::string>>({
      {SpvAccessQualifierReadOnly,
       "ReadOnly"},
      {SpvAccessQualifierWriteOnly,
       "WriteOnly"},
      {SpvAccessQualifierReadWrite,
       "ReadWrite"},
    })), );

INSTANTIATE_TEST_CASE_P(FunctionParameterAttributeAllValues, FunctionParameterAttributeToStringTest,
    ValuesIn(std::vector<std::pair<SpvFunctionParameterAttribute, std::string>>({
      {SpvFunctionParameterAttributeZext,
       "Zext"},
      {SpvFunctionParameterAttributeSext,
       "Sext"},
      {SpvFunctionParameterAttributeByVal,
       "ByVal"},
      {SpvFunctionParameterAttributeSret,
       "Sret"},
      {SpvFunctionParameterAttributeNoAlias,
       "NoAlias"},
      {SpvFunctionParameterAttributeNoCapture,
       "NoCapture"},
      {SpvFunctionParameterAttributeNoWrite,
       "NoWrite"},
      {SpvFunctionParameterAttributeNoReadWrite,
       "NoReadWrite"},
    })), );

INSTANTIATE_TEST_CASE_P(DecorationAllValues, DecorationToStringTest,
    ValuesIn(std::vector<std::pair<SpvDecoration, std::string>>({
      {SpvDecorationRelaxedPrecision,
       "RelaxedPrecision"},
      {SpvDecorationSpecId,
       "SpecId"},
      {SpvDecorationBlock,
       "Block"},
      {SpvDecorationBufferBlock,
       "BufferBlock"},
      {SpvDecorationRowMajor,
       "RowMajor"},
      {SpvDecorationColMajor,
       "ColMajor"},
      {SpvDecorationArrayStride,
       "ArrayStride"},
      {SpvDecorationMatrixStride,
       "MatrixStride"},
      {SpvDecorationGLSLShared,
       "GLSLShared"},
      {SpvDecorationGLSLPacked,
       "GLSLPacked"},
      {SpvDecorationCPacked,
       "CPacked"},
      {SpvDecorationBuiltIn,
       "BuiltIn"},
      {SpvDecorationNoPerspective,
       "NoPerspective"},
      {SpvDecorationFlat,
       "Flat"},
      {SpvDecorationPatch,
       "Patch"},
      {SpvDecorationCentroid,
       "Centroid"},
      {SpvDecorationSample,
       "Sample"},
      {SpvDecorationInvariant,
       "Invariant"},
      {SpvDecorationRestrict,
       "Restrict"},
      {SpvDecorationAliased,
       "Aliased"},
      {SpvDecorationVolatile,
       "Volatile"},
      {SpvDecorationConstant,
       "Constant"},
      {SpvDecorationCoherent,
       "Coherent"},
      {SpvDecorationNonWritable,
       "NonWritable"},
      {SpvDecorationNonReadable,
       "NonReadable"},
      {SpvDecorationUniform,
       "Uniform"},
      {SpvDecorationSaturatedConversion,
       "SaturatedConversion"},
      {SpvDecorationStream,
       "Stream"},
      {SpvDecorationLocation,
       "Location"},
      {SpvDecorationComponent,
       "Component"},
      {SpvDecorationIndex,
       "Index"},
      {SpvDecorationBinding,
       "Binding"},
      {SpvDecorationDescriptorSet,
       "DescriptorSet"},
      {SpvDecorationOffset,
       "Offset"},
      {SpvDecorationXfbBuffer,
       "XfbBuffer"},
      {SpvDecorationXfbStride,
       "XfbStride"},
      {SpvDecorationFuncParamAttr,
       "FuncParamAttr"},
      {SpvDecorationFPRoundingMode,
       "FPRoundingMode"},
      {SpvDecorationFPFastMathMode,
       "FPFastMathMode"},
      {SpvDecorationLinkageAttributes,
       "LinkageAttributes"},
      {SpvDecorationNoContraction,
       "NoContraction"},
      {SpvDecorationInputAttachmentIndex,
       "InputAttachmentIndex"},
      {SpvDecorationAlignment,
       "Alignment"},
      {SpvDecorationMaxByteOffset,
       "MaxByteOffset"},
      {SpvDecorationAlignmentId,
       "AlignmentId"},
      {SpvDecorationMaxByteOffsetId,
       "MaxByteOffsetId"},
      {SpvDecorationExplicitInterpAMD,
       "ExplicitInterpAMD"},
      {SpvDecorationOverrideCoverageNV,
       "OverrideCoverageNV"},
      {SpvDecorationPassthroughNV,
       "PassthroughNV"},
      {SpvDecorationViewportRelativeNV,
       "ViewportRelativeNV"},
      {SpvDecorationSecondaryViewportRelativeNV,
       "SecondaryViewportRelativeNV"},
    })), );

INSTANTIATE_TEST_CASE_P(BuiltInAllValues, BuiltInToStringTest,
    ValuesIn(std::vector<std::pair<SpvBuiltIn, std::string>>({
      {SpvBuiltInPosition,
       "Position"},
      {SpvBuiltInPointSize,
       "PointSize"},
      {SpvBuiltInClipDistance,
       "ClipDistance"},
      {SpvBuiltInCullDistance,
       "CullDistance"},
      {SpvBuiltInVertexId,
       "VertexId"},
      {SpvBuiltInInstanceId,
       "InstanceId"},
      {SpvBuiltInPrimitiveId,
       "PrimitiveId"},
      {SpvBuiltInInvocationId,
       "InvocationId"},
      {SpvBuiltInLayer,
       "Layer"},
      {SpvBuiltInViewportIndex,
       "ViewportIndex"},
      {SpvBuiltInTessLevelOuter,
       "TessLevelOuter"},
      {SpvBuiltInTessLevelInner,
       "TessLevelInner"},
      {SpvBuiltInTessCoord,
       "TessCoord"},
      {SpvBuiltInPatchVertices,
       "PatchVertices"},
      {SpvBuiltInFragCoord,
       "FragCoord"},
      {SpvBuiltInPointCoord,
       "PointCoord"},
      {SpvBuiltInFrontFacing,
       "FrontFacing"},
      {SpvBuiltInSampleId,
       "SampleId"},
      {SpvBuiltInSamplePosition,
       "SamplePosition"},
      {SpvBuiltInSampleMask,
       "SampleMask"},
      {SpvBuiltInFragDepth,
       "FragDepth"},
      {SpvBuiltInHelperInvocation,
       "HelperInvocation"},
      {SpvBuiltInNumWorkgroups,
       "NumWorkgroups"},
      {SpvBuiltInWorkgroupSize,
       "WorkgroupSize"},
      {SpvBuiltInWorkgroupId,
       "WorkgroupId"},
      {SpvBuiltInLocalInvocationId,
       "LocalInvocationId"},
      {SpvBuiltInGlobalInvocationId,
       "GlobalInvocationId"},
      {SpvBuiltInLocalInvocationIndex,
       "LocalInvocationIndex"},
      {SpvBuiltInWorkDim,
       "WorkDim"},
      {SpvBuiltInGlobalSize,
       "GlobalSize"},
      {SpvBuiltInEnqueuedWorkgroupSize,
       "EnqueuedWorkgroupSize"},
      {SpvBuiltInGlobalOffset,
       "GlobalOffset"},
      {SpvBuiltInGlobalLinearId,
       "GlobalLinearId"},
      {SpvBuiltInSubgroupSize,
       "SubgroupSize"},
      {SpvBuiltInSubgroupMaxSize,
       "SubgroupMaxSize"},
      {SpvBuiltInNumSubgroups,
       "NumSubgroups"},
      {SpvBuiltInNumEnqueuedSubgroups,
       "NumEnqueuedSubgroups"},
      {SpvBuiltInSubgroupId,
       "SubgroupId"},
      {SpvBuiltInSubgroupLocalInvocationId,
       "SubgroupLocalInvocationId"},
      {SpvBuiltInVertexIndex,
       "VertexIndex"},
      {SpvBuiltInInstanceIndex,
       "InstanceIndex"},
      {SpvBuiltInSubgroupEqMaskKHR,
       "SubgroupEqMaskKHR"},
      {SpvBuiltInSubgroupGeMaskKHR,
       "SubgroupGeMaskKHR"},
      {SpvBuiltInSubgroupGtMaskKHR,
       "SubgroupGtMaskKHR"},
      {SpvBuiltInSubgroupLeMaskKHR,
       "SubgroupLeMaskKHR"},
      {SpvBuiltInSubgroupLtMaskKHR,
       "SubgroupLtMaskKHR"},
      {SpvBuiltInBaseVertex,
       "BaseVertex"},
      {SpvBuiltInBaseInstance,
       "BaseInstance"},
      {SpvBuiltInDrawIndex,
       "DrawIndex"},
      {SpvBuiltInDeviceIndex,
       "DeviceIndex"},
      {SpvBuiltInViewIndex,
       "ViewIndex"},
      {SpvBuiltInBaryCoordNoPerspAMD,
       "BaryCoordNoPerspAMD"},
      {SpvBuiltInBaryCoordNoPerspCentroidAMD,
       "BaryCoordNoPerspCentroidAMD"},
      {SpvBuiltInBaryCoordNoPerspSampleAMD,
       "BaryCoordNoPerspSampleAMD"},
      {SpvBuiltInBaryCoordSmoothAMD,
       "BaryCoordSmoothAMD"},
      {SpvBuiltInBaryCoordSmoothCentroidAMD,
       "BaryCoordSmoothCentroidAMD"},
      {SpvBuiltInBaryCoordSmoothSampleAMD,
       "BaryCoordSmoothSampleAMD"},
      {SpvBuiltInBaryCoordPullModelAMD,
       "BaryCoordPullModelAMD"},
      {SpvBuiltInFragStencilRefEXT,
       "FragStencilRefEXT"},
      {SpvBuiltInViewportMaskNV,
       "ViewportMaskNV"},
      {SpvBuiltInSecondaryPositionNV,
       "SecondaryPositionNV"},
      {SpvBuiltInSecondaryViewportMaskNV,
       "SecondaryViewportMaskNV"},
      {SpvBuiltInPositionPerViewNV,
       "PositionPerViewNV"},
      {SpvBuiltInViewportMaskPerViewNV,
       "ViewportMaskPerViewNV"},
    })), );

INSTANTIATE_TEST_CASE_P(ScopeAllValues, ScopeToStringTest,
    ValuesIn(std::vector<std::pair<SpvScope, std::string>>({
      {SpvScopeCrossDevice,
       "CrossDevice"},
      {SpvScopeDevice,
       "Device"},
      {SpvScopeWorkgroup,
       "Workgroup"},
      {SpvScopeSubgroup,
       "Subgroup"},
      {SpvScopeInvocation,
       "Invocation"},
    })), );

INSTANTIATE_TEST_CASE_P(GroupOperationAllValues, GroupOperationToStringTest,
    ValuesIn(std::vector<std::pair<SpvGroupOperation, std::string>>({
      {SpvGroupOperationReduce,
       "Reduce"},
      {SpvGroupOperationInclusiveScan,
       "InclusiveScan"},
      {SpvGroupOperationExclusiveScan,
       "ExclusiveScan"},
    })), );

INSTANTIATE_TEST_CASE_P(KernelEnqueueFlagsAllValues, KernelEnqueueFlagsToStringTest,
    ValuesIn(std::vector<std::pair<SpvKernelEnqueueFlags, std::string>>({
      {SpvKernelEnqueueFlagsNoWait,
       "NoWait"},
      {SpvKernelEnqueueFlagsWaitKernel,
       "WaitKernel"},
      {SpvKernelEnqueueFlagsWaitWorkGroup,
       "WaitWorkGroup"},
    })), );


INSTANTIATE_TEST_CASE_P(AllCapabilities, CapabilityToStringTest,
    ValuesIn(std::vector<std::pair<SpvCapability, std::string>>({
      {SpvCapabilityMatrix,
       "Matrix"},
      {SpvCapabilityShader,
       "Shader"},
      {SpvCapabilityGeometry,
       "Geometry"},
      {SpvCapabilityTessellation,
       "Tessellation"},
      {SpvCapabilityAddresses,
       "Addresses"},
      {SpvCapabilityLinkage,
       "Linkage"},
      {SpvCapabilityKernel,
       "Kernel"},
      {SpvCapabilityVector16,
       "Vector16"},
      {SpvCapabilityFloat16Buffer,
       "Float16Buffer"},
      {SpvCapabilityFloat16,
       "Float16"},
      {SpvCapabilityFloat64,
       "Float64"},
      {SpvCapabilityInt64,
       "Int64"},
      {SpvCapabilityInt64Atomics,
       "Int64Atomics"},
      {SpvCapabilityImageBasic,
       "ImageBasic"},
      {SpvCapabilityImageReadWrite,
       "ImageReadWrite"},
      {SpvCapabilityImageMipmap,
       "ImageMipmap"},
      {SpvCapabilityPipes,
       "Pipes"},
      {SpvCapabilityGroups,
       "Groups"},
      {SpvCapabilityDeviceEnqueue,
       "DeviceEnqueue"},
      {SpvCapabilityLiteralSampler,
       "LiteralSampler"},
      {SpvCapabilityAtomicStorage,
       "AtomicStorage"},
      {SpvCapabilityInt16,
       "Int16"},
      {SpvCapabilityTessellationPointSize,
       "TessellationPointSize"},
      {SpvCapabilityGeometryPointSize,
       "GeometryPointSize"},
      {SpvCapabilityImageGatherExtended,
       "ImageGatherExtended"},
      {SpvCapabilityStorageImageMultisample,
       "StorageImageMultisample"},
      {SpvCapabilityUniformBufferArrayDynamicIndexing,
       "UniformBufferArrayDynamicIndexing"},
      {SpvCapabilitySampledImageArrayDynamicIndexing,
       "SampledImageArrayDynamicIndexing"},
      {SpvCapabilityStorageBufferArrayDynamicIndexing,
       "StorageBufferArrayDynamicIndexing"},
      {SpvCapabilityStorageImageArrayDynamicIndexing,
       "StorageImageArrayDynamicIndexing"},
      {SpvCapabilityClipDistance,
       "ClipDistance"},
      {SpvCapabilityCullDistance,
       "CullDistance"},
      {SpvCapabilityImageCubeArray,
       "ImageCubeArray"},
      {SpvCapabilitySampleRateShading,
       "SampleRateShading"},
      {SpvCapabilityImageRect,
       "ImageRect"},
      {SpvCapabilitySampledRect,
       "SampledRect"},
      {SpvCapabilityGenericPointer,
       "GenericPointer"},
      {SpvCapabilityInt8,
       "Int8"},
      {SpvCapabilityInputAttachment,
       "InputAttachment"},
      {SpvCapabilitySparseResidency,
       "SparseResidency"},
      {SpvCapabilityMinLod,
       "MinLod"},
      {SpvCapabilitySampled1D,
       "Sampled1D"},
      {SpvCapabilityImage1D,
       "Image1D"},
      {SpvCapabilitySampledCubeArray,
       "SampledCubeArray"},
      {SpvCapabilitySampledBuffer,
       "SampledBuffer"},
      {SpvCapabilityImageBuffer,
       "ImageBuffer"},
      {SpvCapabilityImageMSArray,
       "ImageMSArray"},
      {SpvCapabilityStorageImageExtendedFormats,
       "StorageImageExtendedFormats"},
      {SpvCapabilityImageQuery,
       "ImageQuery"},
      {SpvCapabilityDerivativeControl,
       "DerivativeControl"},
      {SpvCapabilityInterpolationFunction,
       "InterpolationFunction"},
      {SpvCapabilityTransformFeedback,
       "TransformFeedback"},
      {SpvCapabilityGeometryStreams,
       "GeometryStreams"},
      {SpvCapabilityStorageImageReadWithoutFormat,
       "StorageImageReadWithoutFormat"},
      {SpvCapabilityStorageImageWriteWithoutFormat,
       "StorageImageWriteWithoutFormat"},
      {SpvCapabilityMultiViewport,
       "MultiViewport"},
      {SpvCapabilitySubgroupDispatch,
       "SubgroupDispatch"},
      {SpvCapabilityNamedBarrier,
       "NamedBarrier"},
      {SpvCapabilityPipeStorage,
       "PipeStorage"},
      {SpvCapabilitySubgroupBallotKHR,
       "SubgroupBallotKHR"},
      {SpvCapabilityDrawParameters,
       "DrawParameters"},
      {SpvCapabilitySubgroupVoteKHR,
       "SubgroupVoteKHR"},
      {SpvCapabilityStorageBuffer16BitAccess,
       "StorageBuffer16BitAccess"},
      {SpvCapabilityStorageUniformBufferBlock16,
       "StorageBuffer16BitAccess"}, // Preferred name
      {SpvCapabilityUniformAndStorageBuffer16BitAccess,
       "UniformAndStorageBuffer16BitAccess"},
      {SpvCapabilityStorageUniform16,
       "UniformAndStorageBuffer16BitAccess"}, // Preferred name
      {SpvCapabilityStoragePushConstant16,
       "StoragePushConstant16"},
      {SpvCapabilityStorageInputOutput16,
       "StorageInputOutput16"},
      {SpvCapabilityDeviceGroup,
       "DeviceGroup"},
      {SpvCapabilityMultiView,
       "MultiView"},
      {SpvCapabilitySampleMaskOverrideCoverageNV,
       "SampleMaskOverrideCoverageNV"},
      {SpvCapabilityGeometryShaderPassthroughNV,
       "GeometryShaderPassthroughNV"},
      // The next two are different names for the same token.
      {SpvCapabilityShaderViewportIndexLayerNV,
       "ShaderViewportIndexLayerNV"},
      {SpvCapabilityShaderViewportIndexLayerEXT,
       "ShaderViewportIndexLayerNV"},
      {SpvCapabilityShaderViewportMaskNV,
       "ShaderViewportMaskNV"},
      {SpvCapabilityShaderStereoViewNV,
       "ShaderStereoViewNV"},
      {SpvCapabilityPerViewAttributesNV,
       "PerViewAttributesNV"}
    })), );

}  // anonymous namespace
