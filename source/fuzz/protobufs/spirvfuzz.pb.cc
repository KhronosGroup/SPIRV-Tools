// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spirvfuzz.proto

#include "spirvfuzz.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_spirvfuzz_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransformationAddBooleanConstant_spirvfuzz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spirvfuzz_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransformationAddDeadBreak_spirvfuzz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spirvfuzz_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransformationMoveBlockDown_spirvfuzz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spirvfuzz_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransformationSplitBlock_spirvfuzz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spirvfuzz_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Transformation_spirvfuzz_2eproto;
namespace spvtools {
namespace fuzz {
namespace protobufs {
class TransformationSequenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationSequence> _instance;
} _TransformationSequence_default_instance_;
class TransformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Transformation> _instance;
  const ::spvtools::fuzz::protobufs::TransformationAddBooleanConstant* add_boolean_constant_;
  const ::spvtools::fuzz::protobufs::TransformationAddDeadBreak* add_dead_break_;
  const ::spvtools::fuzz::protobufs::TransformationMoveBlockDown* move_block_down_;
  const ::spvtools::fuzz::protobufs::TransformationSplitBlock* split_block_;
} _Transformation_default_instance_;
class TransformationAddBooleanConstantDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationAddBooleanConstant> _instance;
} _TransformationAddBooleanConstant_default_instance_;
class TransformationAddDeadBreakDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationAddDeadBreak> _instance;
} _TransformationAddDeadBreak_default_instance_;
class TransformationMoveBlockDownDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationMoveBlockDown> _instance;
} _TransformationMoveBlockDown_default_instance_;
class TransformationSplitBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationSplitBlock> _instance;
} _TransformationSplitBlock_default_instance_;
}  // namespace protobufs
}  // namespace fuzz
}  // namespace spvtools
static void InitDefaultsTransformationSequence_spirvfuzz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spvtools::fuzz::protobufs::_TransformationSequence_default_instance_;
    new (ptr) ::spvtools::fuzz::protobufs::TransformationSequence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spvtools::fuzz::protobufs::TransformationSequence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransformationSequence_spirvfuzz_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransformationSequence_spirvfuzz_2eproto}, {
      &scc_info_Transformation_spirvfuzz_2eproto.base,}};

static void InitDefaultsTransformation_spirvfuzz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spvtools::fuzz::protobufs::_Transformation_default_instance_;
    new (ptr) ::spvtools::fuzz::protobufs::Transformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spvtools::fuzz::protobufs::Transformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Transformation_spirvfuzz_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsTransformation_spirvfuzz_2eproto}, {
      &scc_info_TransformationAddBooleanConstant_spirvfuzz_2eproto.base,
      &scc_info_TransformationAddDeadBreak_spirvfuzz_2eproto.base,
      &scc_info_TransformationMoveBlockDown_spirvfuzz_2eproto.base,
      &scc_info_TransformationSplitBlock_spirvfuzz_2eproto.base,}};

static void InitDefaultsTransformationAddBooleanConstant_spirvfuzz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spvtools::fuzz::protobufs::_TransformationAddBooleanConstant_default_instance_;
    new (ptr) ::spvtools::fuzz::protobufs::TransformationAddBooleanConstant();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spvtools::fuzz::protobufs::TransformationAddBooleanConstant::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransformationAddBooleanConstant_spirvfuzz_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransformationAddBooleanConstant_spirvfuzz_2eproto}, {}};

static void InitDefaultsTransformationAddDeadBreak_spirvfuzz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spvtools::fuzz::protobufs::_TransformationAddDeadBreak_default_instance_;
    new (ptr) ::spvtools::fuzz::protobufs::TransformationAddDeadBreak();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spvtools::fuzz::protobufs::TransformationAddDeadBreak::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransformationAddDeadBreak_spirvfuzz_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransformationAddDeadBreak_spirvfuzz_2eproto}, {}};

static void InitDefaultsTransformationMoveBlockDown_spirvfuzz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spvtools::fuzz::protobufs::_TransformationMoveBlockDown_default_instance_;
    new (ptr) ::spvtools::fuzz::protobufs::TransformationMoveBlockDown();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spvtools::fuzz::protobufs::TransformationMoveBlockDown::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransformationMoveBlockDown_spirvfuzz_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransformationMoveBlockDown_spirvfuzz_2eproto}, {}};

static void InitDefaultsTransformationSplitBlock_spirvfuzz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spvtools::fuzz::protobufs::_TransformationSplitBlock_default_instance_;
    new (ptr) ::spvtools::fuzz::protobufs::TransformationSplitBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spvtools::fuzz::protobufs::TransformationSplitBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransformationSplitBlock_spirvfuzz_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransformationSplitBlock_spirvfuzz_2eproto}, {}};

void InitDefaults_spirvfuzz_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TransformationSequence_spirvfuzz_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Transformation_spirvfuzz_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransformationAddBooleanConstant_spirvfuzz_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransformationAddDeadBreak_spirvfuzz_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransformationMoveBlockDown_spirvfuzz_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransformationSplitBlock_spirvfuzz_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_spirvfuzz_2eproto[6];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_spirvfuzz_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_spirvfuzz_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_spirvfuzz_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationSequence, transformations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::Transformation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::Transformation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::spvtools::fuzz::protobufs::TransformationDefaultTypeInternal, add_boolean_constant_),
  offsetof(::spvtools::fuzz::protobufs::TransformationDefaultTypeInternal, add_dead_break_),
  offsetof(::spvtools::fuzz::protobufs::TransformationDefaultTypeInternal, move_block_down_),
  offsetof(::spvtools::fuzz::protobufs::TransformationDefaultTypeInternal, split_block_),
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::Transformation, transformation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationAddBooleanConstant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationAddBooleanConstant, fresh_id_),
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationAddBooleanConstant, is_true_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationAddDeadBreak, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationAddDeadBreak, from_block_),
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationAddDeadBreak, to_block_),
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationAddDeadBreak, break_condition_value_),
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationAddDeadBreak, phi_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationMoveBlockDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationMoveBlockDown, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationSplitBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationSplitBlock, result_id_),
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationSplitBlock, offset_),
  PROTOBUF_FIELD_OFFSET(::spvtools::fuzz::protobufs::TransformationSplitBlock, fresh_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::spvtools::fuzz::protobufs::TransformationSequence)},
  { 6, -1, sizeof(::spvtools::fuzz::protobufs::Transformation)},
  { 16, -1, sizeof(::spvtools::fuzz::protobufs::TransformationAddBooleanConstant)},
  { 23, -1, sizeof(::spvtools::fuzz::protobufs::TransformationAddDeadBreak)},
  { 32, -1, sizeof(::spvtools::fuzz::protobufs::TransformationMoveBlockDown)},
  { 38, -1, sizeof(::spvtools::fuzz::protobufs::TransformationSplitBlock)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::spvtools::fuzz::protobufs::_TransformationSequence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spvtools::fuzz::protobufs::_Transformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spvtools::fuzz::protobufs::_TransformationAddBooleanConstant_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spvtools::fuzz::protobufs::_TransformationAddDeadBreak_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spvtools::fuzz::protobufs::_TransformationMoveBlockDown_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spvtools::fuzz::protobufs::_TransformationSplitBlock_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_spirvfuzz_2eproto = {
  {}, AddDescriptors_spirvfuzz_2eproto, "spirvfuzz.proto", schemas,
  file_default_instances, TableStruct_spirvfuzz_2eproto::offsets,
  file_level_metadata_spirvfuzz_2eproto, 6, file_level_enum_descriptors_spirvfuzz_2eproto, file_level_service_descriptors_spirvfuzz_2eproto,
};

const char descriptor_table_protodef_spirvfuzz_2eproto[] =
  "\n\017spirvfuzz.proto\022\027spvtools.fuzz.protobu"
  "fs\"Z\n\026TransformationSequence\022@\n\017transfor"
  "mations\030\001 \003(\0132\'.spvtools.fuzz.protobufs."
  "Transformation\"\347\002\n\016Transformation\022Y\n\024add"
  "_boolean_constant\030\001 \001(\01329.spvtools.fuzz."
  "protobufs.TransformationAddBooleanConsta"
  "ntH\000\022M\n\016add_dead_break\030\002 \001(\01323.spvtools."
  "fuzz.protobufs.TransformationAddDeadBrea"
  "kH\000\022O\n\017move_block_down\030\003 \001(\01324.spvtools."
  "fuzz.protobufs.TransformationMoveBlockDo"
  "wnH\000\022H\n\013split_block\030\004 \001(\01321.spvtools.fuz"
  "z.protobufs.TransformationSplitBlockH\000B\020"
  "\n\016transformation\"E\n TransformationAddBoo"
  "leanConstant\022\020\n\010fresh_id\030\001 \001(\r\022\017\n\007is_tru"
  "e\030\002 \001(\010\"r\n\032TransformationAddDeadBreak\022\022\n"
  "\nfrom_block\030\001 \001(\r\022\020\n\010to_block\030\002 \001(\r\022\035\n\025b"
  "reak_condition_value\030\003 \001(\010\022\017\n\007phi_ids\030\004 "
  "\003(\r\"/\n\033TransformationMoveBlockDown\022\020\n\010bl"
  "ock_id\030\001 \001(\r\"O\n\030TransformationSplitBlock"
  "\022\021\n\tresult_id\030\001 \001(\r\022\016\n\006offset\030\002 \001(\r\022\020\n\010f"
  "resh_id\030\003 \001(\rb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_spirvfuzz_2eproto = {
  false, InitDefaults_spirvfuzz_2eproto, 
  descriptor_table_protodef_spirvfuzz_2eproto,
  "spirvfuzz.proto", &assign_descriptors_table_spirvfuzz_2eproto, 821,
};

void AddDescriptors_spirvfuzz_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_spirvfuzz_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_spirvfuzz_2eproto = []() { AddDescriptors_spirvfuzz_2eproto(); return true; }();
namespace spvtools {
namespace fuzz {
namespace protobufs {

// ===================================================================

void TransformationSequence::InitAsDefaultInstance() {
}
class TransformationSequence::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationSequence::kTransformationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationSequence::TransformationSequence()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spvtools.fuzz.protobufs.TransformationSequence)
}
TransformationSequence::TransformationSequence(const TransformationSequence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      transformations_(from.transformations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:spvtools.fuzz.protobufs.TransformationSequence)
}

void TransformationSequence::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransformationSequence_spirvfuzz_2eproto.base);
}

TransformationSequence::~TransformationSequence() {
  // @@protoc_insertion_point(destructor:spvtools.fuzz.protobufs.TransformationSequence)
  SharedDtor();
}

void TransformationSequence::SharedDtor() {
}

void TransformationSequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformationSequence& TransformationSequence::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransformationSequence_spirvfuzz_2eproto.base);
  return *internal_default_instance();
}


void TransformationSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:spvtools.fuzz.protobufs.TransformationSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transformations_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransformationSequence::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransformationSequence*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .spvtools.fuzz.protobufs.Transformation transformations = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::spvtools::fuzz::protobufs::Transformation::_InternalParse;
          object = msg->add_transformations();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransformationSequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spvtools.fuzz.protobufs.TransformationSequence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .spvtools.fuzz.protobufs.Transformation transformations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_transformations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spvtools.fuzz.protobufs.TransformationSequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spvtools.fuzz.protobufs.TransformationSequence)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransformationSequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spvtools.fuzz.protobufs.TransformationSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .spvtools.fuzz.protobufs.Transformation transformations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transformations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->transformations(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spvtools.fuzz.protobufs.TransformationSequence)
}

::google::protobuf::uint8* TransformationSequence::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spvtools.fuzz.protobufs.TransformationSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .spvtools.fuzz.protobufs.Transformation transformations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transformations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->transformations(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spvtools.fuzz.protobufs.TransformationSequence)
  return target;
}

size_t TransformationSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spvtools.fuzz.protobufs.TransformationSequence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .spvtools.fuzz.protobufs.Transformation transformations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->transformations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->transformations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationSequence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spvtools.fuzz.protobufs.TransformationSequence)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationSequence* source =
      ::google::protobuf::DynamicCastToGenerated<TransformationSequence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spvtools.fuzz.protobufs.TransformationSequence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spvtools.fuzz.protobufs.TransformationSequence)
    MergeFrom(*source);
  }
}

void TransformationSequence::MergeFrom(const TransformationSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spvtools.fuzz.protobufs.TransformationSequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transformations_.MergeFrom(from.transformations_);
}

void TransformationSequence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spvtools.fuzz.protobufs.TransformationSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationSequence::CopyFrom(const TransformationSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spvtools.fuzz.protobufs.TransformationSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationSequence::IsInitialized() const {
  return true;
}

void TransformationSequence::Swap(TransformationSequence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationSequence::InternalSwap(TransformationSequence* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&transformations_)->InternalSwap(CastToBase(&other->transformations_));
}

::google::protobuf::Metadata TransformationSequence::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spirvfuzz_2eproto);
  return ::file_level_metadata_spirvfuzz_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Transformation::InitAsDefaultInstance() {
  ::spvtools::fuzz::protobufs::_Transformation_default_instance_.add_boolean_constant_ = const_cast< ::spvtools::fuzz::protobufs::TransformationAddBooleanConstant*>(
      ::spvtools::fuzz::protobufs::TransformationAddBooleanConstant::internal_default_instance());
  ::spvtools::fuzz::protobufs::_Transformation_default_instance_.add_dead_break_ = const_cast< ::spvtools::fuzz::protobufs::TransformationAddDeadBreak*>(
      ::spvtools::fuzz::protobufs::TransformationAddDeadBreak::internal_default_instance());
  ::spvtools::fuzz::protobufs::_Transformation_default_instance_.move_block_down_ = const_cast< ::spvtools::fuzz::protobufs::TransformationMoveBlockDown*>(
      ::spvtools::fuzz::protobufs::TransformationMoveBlockDown::internal_default_instance());
  ::spvtools::fuzz::protobufs::_Transformation_default_instance_.split_block_ = const_cast< ::spvtools::fuzz::protobufs::TransformationSplitBlock*>(
      ::spvtools::fuzz::protobufs::TransformationSplitBlock::internal_default_instance());
}
class Transformation::HasBitSetters {
 public:
  static const ::spvtools::fuzz::protobufs::TransformationAddBooleanConstant& add_boolean_constant(const Transformation* msg);
  static const ::spvtools::fuzz::protobufs::TransformationAddDeadBreak& add_dead_break(const Transformation* msg);
  static const ::spvtools::fuzz::protobufs::TransformationMoveBlockDown& move_block_down(const Transformation* msg);
  static const ::spvtools::fuzz::protobufs::TransformationSplitBlock& split_block(const Transformation* msg);
};

const ::spvtools::fuzz::protobufs::TransformationAddBooleanConstant&
Transformation::HasBitSetters::add_boolean_constant(const Transformation* msg) {
  return *msg->transformation_.add_boolean_constant_;
}
const ::spvtools::fuzz::protobufs::TransformationAddDeadBreak&
Transformation::HasBitSetters::add_dead_break(const Transformation* msg) {
  return *msg->transformation_.add_dead_break_;
}
const ::spvtools::fuzz::protobufs::TransformationMoveBlockDown&
Transformation::HasBitSetters::move_block_down(const Transformation* msg) {
  return *msg->transformation_.move_block_down_;
}
const ::spvtools::fuzz::protobufs::TransformationSplitBlock&
Transformation::HasBitSetters::split_block(const Transformation* msg) {
  return *msg->transformation_.split_block_;
}
void Transformation::set_allocated_add_boolean_constant(::spvtools::fuzz::protobufs::TransformationAddBooleanConstant* add_boolean_constant) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (add_boolean_constant) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      add_boolean_constant = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_boolean_constant, submessage_arena);
    }
    set_has_add_boolean_constant();
    transformation_.add_boolean_constant_ = add_boolean_constant;
  }
  // @@protoc_insertion_point(field_set_allocated:spvtools.fuzz.protobufs.Transformation.add_boolean_constant)
}
void Transformation::set_allocated_add_dead_break(::spvtools::fuzz::protobufs::TransformationAddDeadBreak* add_dead_break) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (add_dead_break) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      add_dead_break = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_dead_break, submessage_arena);
    }
    set_has_add_dead_break();
    transformation_.add_dead_break_ = add_dead_break;
  }
  // @@protoc_insertion_point(field_set_allocated:spvtools.fuzz.protobufs.Transformation.add_dead_break)
}
void Transformation::set_allocated_move_block_down(::spvtools::fuzz::protobufs::TransformationMoveBlockDown* move_block_down) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (move_block_down) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      move_block_down = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, move_block_down, submessage_arena);
    }
    set_has_move_block_down();
    transformation_.move_block_down_ = move_block_down;
  }
  // @@protoc_insertion_point(field_set_allocated:spvtools.fuzz.protobufs.Transformation.move_block_down)
}
void Transformation::set_allocated_split_block(::spvtools::fuzz::protobufs::TransformationSplitBlock* split_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (split_block) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      split_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, split_block, submessage_arena);
    }
    set_has_split_block();
    transformation_.split_block_ = split_block;
  }
  // @@protoc_insertion_point(field_set_allocated:spvtools.fuzz.protobufs.Transformation.split_block)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transformation::kAddBooleanConstantFieldNumber;
const int Transformation::kAddDeadBreakFieldNumber;
const int Transformation::kMoveBlockDownFieldNumber;
const int Transformation::kSplitBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transformation::Transformation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spvtools.fuzz.protobufs.Transformation)
}
Transformation::Transformation(const Transformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_transformation();
  switch (from.transformation_case()) {
    case kAddBooleanConstant: {
      mutable_add_boolean_constant()->::spvtools::fuzz::protobufs::TransformationAddBooleanConstant::MergeFrom(from.add_boolean_constant());
      break;
    }
    case kAddDeadBreak: {
      mutable_add_dead_break()->::spvtools::fuzz::protobufs::TransformationAddDeadBreak::MergeFrom(from.add_dead_break());
      break;
    }
    case kMoveBlockDown: {
      mutable_move_block_down()->::spvtools::fuzz::protobufs::TransformationMoveBlockDown::MergeFrom(from.move_block_down());
      break;
    }
    case kSplitBlock: {
      mutable_split_block()->::spvtools::fuzz::protobufs::TransformationSplitBlock::MergeFrom(from.split_block());
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:spvtools.fuzz.protobufs.Transformation)
}

void Transformation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Transformation_spirvfuzz_2eproto.base);
  clear_has_transformation();
}

Transformation::~Transformation() {
  // @@protoc_insertion_point(destructor:spvtools.fuzz.protobufs.Transformation)
  SharedDtor();
}

void Transformation::SharedDtor() {
  if (has_transformation()) {
    clear_transformation();
  }
}

void Transformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transformation& Transformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Transformation_spirvfuzz_2eproto.base);
  return *internal_default_instance();
}


void Transformation::clear_transformation() {
// @@protoc_insertion_point(one_of_clear_start:spvtools.fuzz.protobufs.Transformation)
  switch (transformation_case()) {
    case kAddBooleanConstant: {
      delete transformation_.add_boolean_constant_;
      break;
    }
    case kAddDeadBreak: {
      delete transformation_.add_dead_break_;
      break;
    }
    case kMoveBlockDown: {
      delete transformation_.move_block_down_;
      break;
    }
    case kSplitBlock: {
      delete transformation_.split_block_;
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSFORMATION_NOT_SET;
}


void Transformation::Clear() {
// @@protoc_insertion_point(message_clear_start:spvtools.fuzz.protobufs.Transformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_transformation();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Transformation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Transformation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .spvtools.fuzz.protobufs.TransformationAddBooleanConstant add_boolean_constant = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::spvtools::fuzz::protobufs::TransformationAddBooleanConstant::_InternalParse;
        object = msg->mutable_add_boolean_constant();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .spvtools.fuzz.protobufs.TransformationAddDeadBreak add_dead_break = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::spvtools::fuzz::protobufs::TransformationAddDeadBreak::_InternalParse;
        object = msg->mutable_add_dead_break();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .spvtools.fuzz.protobufs.TransformationMoveBlockDown move_block_down = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::spvtools::fuzz::protobufs::TransformationMoveBlockDown::_InternalParse;
        object = msg->mutable_move_block_down();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .spvtools.fuzz.protobufs.TransformationSplitBlock split_block = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::spvtools::fuzz::protobufs::TransformationSplitBlock::_InternalParse;
        object = msg->mutable_split_block();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Transformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spvtools.fuzz.protobufs.Transformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .spvtools.fuzz.protobufs.TransformationAddBooleanConstant add_boolean_constant = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_boolean_constant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spvtools.fuzz.protobufs.TransformationAddDeadBreak add_dead_break = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_dead_break()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spvtools.fuzz.protobufs.TransformationMoveBlockDown move_block_down = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_move_block_down()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spvtools.fuzz.protobufs.TransformationSplitBlock split_block = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_split_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spvtools.fuzz.protobufs.Transformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spvtools.fuzz.protobufs.Transformation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Transformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spvtools.fuzz.protobufs.Transformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .spvtools.fuzz.protobufs.TransformationAddBooleanConstant add_boolean_constant = 1;
  if (has_add_boolean_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::add_boolean_constant(this), output);
  }

  // .spvtools.fuzz.protobufs.TransformationAddDeadBreak add_dead_break = 2;
  if (has_add_dead_break()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::add_dead_break(this), output);
  }

  // .spvtools.fuzz.protobufs.TransformationMoveBlockDown move_block_down = 3;
  if (has_move_block_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::move_block_down(this), output);
  }

  // .spvtools.fuzz.protobufs.TransformationSplitBlock split_block = 4;
  if (has_split_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::split_block(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spvtools.fuzz.protobufs.Transformation)
}

::google::protobuf::uint8* Transformation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spvtools.fuzz.protobufs.Transformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .spvtools.fuzz.protobufs.TransformationAddBooleanConstant add_boolean_constant = 1;
  if (has_add_boolean_constant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::add_boolean_constant(this), target);
  }

  // .spvtools.fuzz.protobufs.TransformationAddDeadBreak add_dead_break = 2;
  if (has_add_dead_break()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::add_dead_break(this), target);
  }

  // .spvtools.fuzz.protobufs.TransformationMoveBlockDown move_block_down = 3;
  if (has_move_block_down()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::move_block_down(this), target);
  }

  // .spvtools.fuzz.protobufs.TransformationSplitBlock split_block = 4;
  if (has_split_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::split_block(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spvtools.fuzz.protobufs.Transformation)
  return target;
}

size_t Transformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spvtools.fuzz.protobufs.Transformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (transformation_case()) {
    // .spvtools.fuzz.protobufs.TransformationAddBooleanConstant add_boolean_constant = 1;
    case kAddBooleanConstant: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.add_boolean_constant_);
      break;
    }
    // .spvtools.fuzz.protobufs.TransformationAddDeadBreak add_dead_break = 2;
    case kAddDeadBreak: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.add_dead_break_);
      break;
    }
    // .spvtools.fuzz.protobufs.TransformationMoveBlockDown move_block_down = 3;
    case kMoveBlockDown: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.move_block_down_);
      break;
    }
    // .spvtools.fuzz.protobufs.TransformationSplitBlock split_block = 4;
    case kSplitBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.split_block_);
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spvtools.fuzz.protobufs.Transformation)
  GOOGLE_DCHECK_NE(&from, this);
  const Transformation* source =
      ::google::protobuf::DynamicCastToGenerated<Transformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spvtools.fuzz.protobufs.Transformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spvtools.fuzz.protobufs.Transformation)
    MergeFrom(*source);
  }
}

void Transformation::MergeFrom(const Transformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spvtools.fuzz.protobufs.Transformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.transformation_case()) {
    case kAddBooleanConstant: {
      mutable_add_boolean_constant()->::spvtools::fuzz::protobufs::TransformationAddBooleanConstant::MergeFrom(from.add_boolean_constant());
      break;
    }
    case kAddDeadBreak: {
      mutable_add_dead_break()->::spvtools::fuzz::protobufs::TransformationAddDeadBreak::MergeFrom(from.add_dead_break());
      break;
    }
    case kMoveBlockDown: {
      mutable_move_block_down()->::spvtools::fuzz::protobufs::TransformationMoveBlockDown::MergeFrom(from.move_block_down());
      break;
    }
    case kSplitBlock: {
      mutable_split_block()->::spvtools::fuzz::protobufs::TransformationSplitBlock::MergeFrom(from.split_block());
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
}

void Transformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spvtools.fuzz.protobufs.Transformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transformation::CopyFrom(const Transformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spvtools.fuzz.protobufs.Transformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transformation::IsInitialized() const {
  return true;
}

void Transformation::Swap(Transformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transformation::InternalSwap(Transformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(transformation_, other->transformation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Transformation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spirvfuzz_2eproto);
  return ::file_level_metadata_spirvfuzz_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransformationAddBooleanConstant::InitAsDefaultInstance() {
}
class TransformationAddBooleanConstant::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationAddBooleanConstant::kFreshIdFieldNumber;
const int TransformationAddBooleanConstant::kIsTrueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationAddBooleanConstant::TransformationAddBooleanConstant()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
}
TransformationAddBooleanConstant::TransformationAddBooleanConstant(const TransformationAddBooleanConstant& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fresh_id_, &from.fresh_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_true_) -
    reinterpret_cast<char*>(&fresh_id_)) + sizeof(is_true_));
  // @@protoc_insertion_point(copy_constructor:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
}

void TransformationAddBooleanConstant::SharedCtor() {
  ::memset(&fresh_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_true_) -
      reinterpret_cast<char*>(&fresh_id_)) + sizeof(is_true_));
}

TransformationAddBooleanConstant::~TransformationAddBooleanConstant() {
  // @@protoc_insertion_point(destructor:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
  SharedDtor();
}

void TransformationAddBooleanConstant::SharedDtor() {
}

void TransformationAddBooleanConstant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformationAddBooleanConstant& TransformationAddBooleanConstant::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransformationAddBooleanConstant_spirvfuzz_2eproto.base);
  return *internal_default_instance();
}


void TransformationAddBooleanConstant::Clear() {
// @@protoc_insertion_point(message_clear_start:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fresh_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_true_) -
      reinterpret_cast<char*>(&fresh_id_)) + sizeof(is_true_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransformationAddBooleanConstant::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransformationAddBooleanConstant*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 fresh_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fresh_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_true = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_true(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransformationAddBooleanConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 fresh_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fresh_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_true = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_true_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransformationAddBooleanConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fresh_id = 1;
  if (this->fresh_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fresh_id(), output);
  }

  // bool is_true = 2;
  if (this->is_true() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_true(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
}

::google::protobuf::uint8* TransformationAddBooleanConstant::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fresh_id = 1;
  if (this->fresh_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fresh_id(), target);
  }

  // bool is_true = 2;
  if (this->is_true() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_true(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
  return target;
}

size_t TransformationAddBooleanConstant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fresh_id = 1;
  if (this->fresh_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fresh_id());
  }

  // bool is_true = 2;
  if (this->is_true() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationAddBooleanConstant::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationAddBooleanConstant* source =
      ::google::protobuf::DynamicCastToGenerated<TransformationAddBooleanConstant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
    MergeFrom(*source);
  }
}

void TransformationAddBooleanConstant::MergeFrom(const TransformationAddBooleanConstant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fresh_id() != 0) {
    set_fresh_id(from.fresh_id());
  }
  if (from.is_true() != 0) {
    set_is_true(from.is_true());
  }
}

void TransformationAddBooleanConstant::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationAddBooleanConstant::CopyFrom(const TransformationAddBooleanConstant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spvtools.fuzz.protobufs.TransformationAddBooleanConstant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationAddBooleanConstant::IsInitialized() const {
  return true;
}

void TransformationAddBooleanConstant::Swap(TransformationAddBooleanConstant* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationAddBooleanConstant::InternalSwap(TransformationAddBooleanConstant* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fresh_id_, other->fresh_id_);
  swap(is_true_, other->is_true_);
}

::google::protobuf::Metadata TransformationAddBooleanConstant::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spirvfuzz_2eproto);
  return ::file_level_metadata_spirvfuzz_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransformationAddDeadBreak::InitAsDefaultInstance() {
}
class TransformationAddDeadBreak::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationAddDeadBreak::kFromBlockFieldNumber;
const int TransformationAddDeadBreak::kToBlockFieldNumber;
const int TransformationAddDeadBreak::kBreakConditionValueFieldNumber;
const int TransformationAddDeadBreak::kPhiIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationAddDeadBreak::TransformationAddDeadBreak()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
}
TransformationAddDeadBreak::TransformationAddDeadBreak(const TransformationAddDeadBreak& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      phi_ids_(from.phi_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_block_, &from.from_block_,
    static_cast<size_t>(reinterpret_cast<char*>(&break_condition_value_) -
    reinterpret_cast<char*>(&from_block_)) + sizeof(break_condition_value_));
  // @@protoc_insertion_point(copy_constructor:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
}

void TransformationAddDeadBreak::SharedCtor() {
  ::memset(&from_block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&break_condition_value_) -
      reinterpret_cast<char*>(&from_block_)) + sizeof(break_condition_value_));
}

TransformationAddDeadBreak::~TransformationAddDeadBreak() {
  // @@protoc_insertion_point(destructor:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
  SharedDtor();
}

void TransformationAddDeadBreak::SharedDtor() {
}

void TransformationAddDeadBreak::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformationAddDeadBreak& TransformationAddDeadBreak::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransformationAddDeadBreak_spirvfuzz_2eproto.base);
  return *internal_default_instance();
}


void TransformationAddDeadBreak::Clear() {
// @@protoc_insertion_point(message_clear_start:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phi_ids_.Clear();
  ::memset(&from_block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&break_condition_value_) -
      reinterpret_cast<char*>(&from_block_)) + sizeof(break_condition_value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransformationAddDeadBreak::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransformationAddDeadBreak*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 from_block = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_from_block(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 to_block = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_to_block(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool break_condition_value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_break_condition_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 phi_ids = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_phi_ids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        do {
          msg->add_phi_ids(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransformationAddDeadBreak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 from_block = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 to_block = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool break_condition_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &break_condition_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 phi_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_phi_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_phi_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransformationAddDeadBreak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_block = 1;
  if (this->from_block() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_block(), output);
  }

  // uint32 to_block = 2;
  if (this->to_block() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_block(), output);
  }

  // bool break_condition_value = 3;
  if (this->break_condition_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->break_condition_value(), output);
  }

  // repeated uint32 phi_ids = 4;
  if (this->phi_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_phi_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->phi_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->phi_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
}

::google::protobuf::uint8* TransformationAddDeadBreak::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_block = 1;
  if (this->from_block() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from_block(), target);
  }

  // uint32 to_block = 2;
  if (this->to_block() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to_block(), target);
  }

  // bool break_condition_value = 3;
  if (this->break_condition_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->break_condition_value(), target);
  }

  // repeated uint32 phi_ids = 4;
  if (this->phi_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _phi_ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->phi_ids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
  return target;
}

size_t TransformationAddDeadBreak::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 phi_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->phi_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _phi_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 from_block = 1;
  if (this->from_block() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_block());
  }

  // uint32 to_block = 2;
  if (this->to_block() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_block());
  }

  // bool break_condition_value = 3;
  if (this->break_condition_value() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationAddDeadBreak::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationAddDeadBreak* source =
      ::google::protobuf::DynamicCastToGenerated<TransformationAddDeadBreak>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
    MergeFrom(*source);
  }
}

void TransformationAddDeadBreak::MergeFrom(const TransformationAddDeadBreak& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phi_ids_.MergeFrom(from.phi_ids_);
  if (from.from_block() != 0) {
    set_from_block(from.from_block());
  }
  if (from.to_block() != 0) {
    set_to_block(from.to_block());
  }
  if (from.break_condition_value() != 0) {
    set_break_condition_value(from.break_condition_value());
  }
}

void TransformationAddDeadBreak::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationAddDeadBreak::CopyFrom(const TransformationAddDeadBreak& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spvtools.fuzz.protobufs.TransformationAddDeadBreak)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationAddDeadBreak::IsInitialized() const {
  return true;
}

void TransformationAddDeadBreak::Swap(TransformationAddDeadBreak* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationAddDeadBreak::InternalSwap(TransformationAddDeadBreak* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  phi_ids_.InternalSwap(&other->phi_ids_);
  swap(from_block_, other->from_block_);
  swap(to_block_, other->to_block_);
  swap(break_condition_value_, other->break_condition_value_);
}

::google::protobuf::Metadata TransformationAddDeadBreak::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spirvfuzz_2eproto);
  return ::file_level_metadata_spirvfuzz_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransformationMoveBlockDown::InitAsDefaultInstance() {
}
class TransformationMoveBlockDown::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationMoveBlockDown::kBlockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationMoveBlockDown::TransformationMoveBlockDown()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
}
TransformationMoveBlockDown::TransformationMoveBlockDown(const TransformationMoveBlockDown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_ = from.block_id_;
  // @@protoc_insertion_point(copy_constructor:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
}

void TransformationMoveBlockDown::SharedCtor() {
  block_id_ = 0u;
}

TransformationMoveBlockDown::~TransformationMoveBlockDown() {
  // @@protoc_insertion_point(destructor:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
  SharedDtor();
}

void TransformationMoveBlockDown::SharedDtor() {
}

void TransformationMoveBlockDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformationMoveBlockDown& TransformationMoveBlockDown::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransformationMoveBlockDown_spirvfuzz_2eproto.base);
  return *internal_default_instance();
}


void TransformationMoveBlockDown::Clear() {
// @@protoc_insertion_point(message_clear_start:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransformationMoveBlockDown::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransformationMoveBlockDown*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 block_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_block_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransformationMoveBlockDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 block_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransformationMoveBlockDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->block_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
}

::google::protobuf::uint8* TransformationMoveBlockDown::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->block_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
  return target;
}

size_t TransformationMoveBlockDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 block_id = 1;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->block_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationMoveBlockDown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationMoveBlockDown* source =
      ::google::protobuf::DynamicCastToGenerated<TransformationMoveBlockDown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
    MergeFrom(*source);
  }
}

void TransformationMoveBlockDown::MergeFrom(const TransformationMoveBlockDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_id() != 0) {
    set_block_id(from.block_id());
  }
}

void TransformationMoveBlockDown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationMoveBlockDown::CopyFrom(const TransformationMoveBlockDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spvtools.fuzz.protobufs.TransformationMoveBlockDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationMoveBlockDown::IsInitialized() const {
  return true;
}

void TransformationMoveBlockDown::Swap(TransformationMoveBlockDown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationMoveBlockDown::InternalSwap(TransformationMoveBlockDown* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(block_id_, other->block_id_);
}

::google::protobuf::Metadata TransformationMoveBlockDown::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spirvfuzz_2eproto);
  return ::file_level_metadata_spirvfuzz_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransformationSplitBlock::InitAsDefaultInstance() {
}
class TransformationSplitBlock::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationSplitBlock::kResultIdFieldNumber;
const int TransformationSplitBlock::kOffsetFieldNumber;
const int TransformationSplitBlock::kFreshIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationSplitBlock::TransformationSplitBlock()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spvtools.fuzz.protobufs.TransformationSplitBlock)
}
TransformationSplitBlock::TransformationSplitBlock(const TransformationSplitBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_id_, &from.result_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fresh_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(fresh_id_));
  // @@protoc_insertion_point(copy_constructor:spvtools.fuzz.protobufs.TransformationSplitBlock)
}

void TransformationSplitBlock::SharedCtor() {
  ::memset(&result_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fresh_id_) -
      reinterpret_cast<char*>(&result_id_)) + sizeof(fresh_id_));
}

TransformationSplitBlock::~TransformationSplitBlock() {
  // @@protoc_insertion_point(destructor:spvtools.fuzz.protobufs.TransformationSplitBlock)
  SharedDtor();
}

void TransformationSplitBlock::SharedDtor() {
}

void TransformationSplitBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformationSplitBlock& TransformationSplitBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransformationSplitBlock_spirvfuzz_2eproto.base);
  return *internal_default_instance();
}


void TransformationSplitBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:spvtools.fuzz.protobufs.TransformationSplitBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fresh_id_) -
      reinterpret_cast<char*>(&result_id_)) + sizeof(fresh_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransformationSplitBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransformationSplitBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 result_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 offset = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 fresh_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_fresh_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransformationSplitBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spvtools.fuzz.protobufs.TransformationSplitBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 result_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fresh_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fresh_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spvtools.fuzz.protobufs.TransformationSplitBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spvtools.fuzz.protobufs.TransformationSplitBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransformationSplitBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spvtools.fuzz.protobufs.TransformationSplitBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result_id = 1;
  if (this->result_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_id(), output);
  }

  // uint32 offset = 2;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // uint32 fresh_id = 3;
  if (this->fresh_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fresh_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spvtools.fuzz.protobufs.TransformationSplitBlock)
}

::google::protobuf::uint8* TransformationSplitBlock::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spvtools.fuzz.protobufs.TransformationSplitBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result_id = 1;
  if (this->result_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_id(), target);
  }

  // uint32 offset = 2;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // uint32 fresh_id = 3;
  if (this->fresh_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fresh_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spvtools.fuzz.protobufs.TransformationSplitBlock)
  return target;
}

size_t TransformationSplitBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spvtools.fuzz.protobufs.TransformationSplitBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result_id = 1;
  if (this->result_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_id());
  }

  // uint32 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  // uint32 fresh_id = 3;
  if (this->fresh_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fresh_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationSplitBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spvtools.fuzz.protobufs.TransformationSplitBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationSplitBlock* source =
      ::google::protobuf::DynamicCastToGenerated<TransformationSplitBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spvtools.fuzz.protobufs.TransformationSplitBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spvtools.fuzz.protobufs.TransformationSplitBlock)
    MergeFrom(*source);
  }
}

void TransformationSplitBlock::MergeFrom(const TransformationSplitBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spvtools.fuzz.protobufs.TransformationSplitBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_id() != 0) {
    set_result_id(from.result_id());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.fresh_id() != 0) {
    set_fresh_id(from.fresh_id());
  }
}

void TransformationSplitBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spvtools.fuzz.protobufs.TransformationSplitBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationSplitBlock::CopyFrom(const TransformationSplitBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spvtools.fuzz.protobufs.TransformationSplitBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationSplitBlock::IsInitialized() const {
  return true;
}

void TransformationSplitBlock::Swap(TransformationSplitBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationSplitBlock::InternalSwap(TransformationSplitBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_id_, other->result_id_);
  swap(offset_, other->offset_);
  swap(fresh_id_, other->fresh_id_);
}

::google::protobuf::Metadata TransformationSplitBlock::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spirvfuzz_2eproto);
  return ::file_level_metadata_spirvfuzz_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobufs
}  // namespace fuzz
}  // namespace spvtools
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::spvtools::fuzz::protobufs::TransformationSequence* Arena::CreateMaybeMessage< ::spvtools::fuzz::protobufs::TransformationSequence >(Arena* arena) {
  return Arena::CreateInternal< ::spvtools::fuzz::protobufs::TransformationSequence >(arena);
}
template<> PROTOBUF_NOINLINE ::spvtools::fuzz::protobufs::Transformation* Arena::CreateMaybeMessage< ::spvtools::fuzz::protobufs::Transformation >(Arena* arena) {
  return Arena::CreateInternal< ::spvtools::fuzz::protobufs::Transformation >(arena);
}
template<> PROTOBUF_NOINLINE ::spvtools::fuzz::protobufs::TransformationAddBooleanConstant* Arena::CreateMaybeMessage< ::spvtools::fuzz::protobufs::TransformationAddBooleanConstant >(Arena* arena) {
  return Arena::CreateInternal< ::spvtools::fuzz::protobufs::TransformationAddBooleanConstant >(arena);
}
template<> PROTOBUF_NOINLINE ::spvtools::fuzz::protobufs::TransformationAddDeadBreak* Arena::CreateMaybeMessage< ::spvtools::fuzz::protobufs::TransformationAddDeadBreak >(Arena* arena) {
  return Arena::CreateInternal< ::spvtools::fuzz::protobufs::TransformationAddDeadBreak >(arena);
}
template<> PROTOBUF_NOINLINE ::spvtools::fuzz::protobufs::TransformationMoveBlockDown* Arena::CreateMaybeMessage< ::spvtools::fuzz::protobufs::TransformationMoveBlockDown >(Arena* arena) {
  return Arena::CreateInternal< ::spvtools::fuzz::protobufs::TransformationMoveBlockDown >(arena);
}
template<> PROTOBUF_NOINLINE ::spvtools::fuzz::protobufs::TransformationSplitBlock* Arena::CreateMaybeMessage< ::spvtools::fuzz::protobufs::TransformationSplitBlock >(Arena* arena) {
  return Arena::CreateInternal< ::spvtools::fuzz::protobufs::TransformationSplitBlock >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
